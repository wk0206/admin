"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _proProvider = require("@ant-design/pro-provider");

var _classnames = _interopRequireDefault(require("classnames"));

var _useJsonComparison = require("use-json-comparison");

var _proUtils = require("@ant-design/pro-utils");

var _useFetchData = _interopRequireDefault(require("./useFetchData"));

var _container = _interopRequireDefault(require("./container"));

var _ToolBar = _interopRequireDefault(require("./components/ToolBar"));

var _Alert = _interopRequireDefault(require("./components/Alert"));

var _Form = _interopRequireDefault(require("./components/Form"));

var _utils = require("./utils");

var _genProColumnToColumn = require("./utils/genProColumnToColumn");

require("./index.less");

var _columnSort = require("./utils/columnSort");

var _proForm = _interopRequireDefault(require("@ant-design/pro-form"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function TableRender(props) {
  var _props$tableLayout, _props$columns, _props$editable;

  var rowKey = props.rowKey,
      tableClassName = props.tableClassName,
      action = props.action,
      tableColumn = props.tableColumn,
      type = props.type,
      pagination = props.pagination,
      rowSelection = props.rowSelection,
      size = props.size,
      tableStyle = props.tableStyle,
      toolbarDom = props.toolbarDom,
      searchNode = props.searchNode,
      style = props.style,
      cardProps = props.cardProps,
      alertDom = props.alertDom,
      onSortChange = props.onSortChange,
      onFilterChange = props.onFilterChange,
      options = props.options,
      isLightFilter = props.isLightFilter,
      className = props.className,
      cardBordered = props.cardBordered,
      editableUtils = props.editableUtils,
      rootRef = props.rootRef,
      rest = _objectWithoutProperties(props, ["rowKey", "tableClassName", "action", "tableColumn", "type", "pagination", "rowSelection", "size", "tableStyle", "toolbarDom", "searchNode", "style", "cardProps", "alertDom", "onSortChange", "onFilterChange", "options", "isLightFilter", "className", "cardBordered", "editableUtils", "rootRef"]);

  var counter = _container.default.useContainer();

  var columns = (0, _react.useMemo)(function () {
    return tableColumn.filter(function (item) {
      // 删掉不应该显示的
      var columnKey = (0, _utils.genColumnKey)(item.key, item.index);
      var config = counter.columnsMap[columnKey];

      if (config && config.show === false) {
        return false;
      }

      return true;
    });
  }, [counter.columnsMap, tableColumn]);
  /** 如果所有列中的 filters=true| undefined 说明是用的是本地筛选 任何一列配置 filters=false，就能绕过这个判断 */

  var useLocaleFilter = (0, _react.useMemo)(function () {
    return columns === null || columns === void 0 ? void 0 : columns.every(function (column) {
      return column.filters === true && column.onFilter === true || column.filters === undefined && column.onFilter === undefined;
    });
  }, [columns]);
  /**
   * 如果是分页的新增，总是加到最后一行
   *
   * @returns
   */

  var editableDataSource = function editableDataSource() {
    var _ref = editableUtils.newLineRecord || {},
        newLineOptions = _ref.options,
        row = _ref.defaultValue;

    if ((newLineOptions === null || newLineOptions === void 0 ? void 0 : newLineOptions.position) === 'top') {
      return [row].concat(_toConsumableArray(action.dataSource));
    } // 如果有分页的功能，我们加到这一页的末尾


    if (pagination && (pagination === null || pagination === void 0 ? void 0 : pagination.current) && (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize)) {
      var newDataSource = _toConsumableArray(action.dataSource);

      if ((pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) > newDataSource.length) {
        newDataSource.push(row);
        return newDataSource;
      }

      newDataSource.splice((pagination === null || pagination === void 0 ? void 0 : pagination.current) * (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) - 1, 0, row);
      return newDataSource;
    }

    return [].concat(_toConsumableArray(action.dataSource), [row]);
  };

  var getTableProps = function getTableProps() {
    return _objectSpread(_objectSpread({}, rest), {}, {
      size: size,
      rowSelection: rowSelection === false ? undefined : rowSelection,
      className: tableClassName,
      style: tableStyle,
      columns: columns,
      loading: action.loading,
      dataSource: editableUtils.newLineRecord ? editableDataSource() : action.dataSource,
      pagination: pagination,
      onChange: function onChange(changePagination, filters, sorter, extra) {
        var _rest$onChange;

        (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, changePagination, filters, sorter, extra);

        if (!useLocaleFilter) {
          onFilterChange((0, _proUtils.omitUndefined)(filters));
        } // 制造筛选的数据
        // 制造一个排序的数据


        if (Array.isArray(sorter)) {
          var data = sorter.reduce(function (pre, value) {
            return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, "".concat(value.field), value.order));
          }, {});
          onSortChange((0, _proUtils.omitUndefined)(data));
        } else {
          var _sorter$column;

          var sorterOfColumn = (_sorter$column = sorter.column) === null || _sorter$column === void 0 ? void 0 : _sorter$column.sorter;
          var isSortByField = (sorterOfColumn === null || sorterOfColumn === void 0 ? void 0 : sorterOfColumn.toString()) === sorterOfColumn;
          onSortChange((0, _proUtils.omitUndefined)(_defineProperty({}, "".concat(isSortByField ? sorterOfColumn : sorter.field), sorter.order)));
        }
      }
    });
  };
  /** 如果有 ellipsis ，设置 tableLayout 为 fixed */


  var tableLayout = // 优先以用户设置为准
  ((_props$tableLayout = props.tableLayout) !== null && _props$tableLayout !== void 0 ? _props$tableLayout : (_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : _props$columns.some(function (item) {
    return item.ellipsis;
  })) ? 'fixed' : 'auto';
  /** 默认的 table dom，如果是编辑模式，外面还要包个 form */

  var baseTableDom = props.editable ? /*#__PURE__*/_react.default.createElement(_proForm.default, {
    component: false,
    form: (_props$editable = props.editable) === null || _props$editable === void 0 ? void 0 : _props$editable.form,
    onValuesChange: editableUtils.onValuesChange,
    key: "table",
    submitter: false
  }, /*#__PURE__*/_react.default.createElement(_antd.Table, _extends({}, getTableProps(), {
    rowKey: rowKey,
    tableLayout: tableLayout
  }))) : /*#__PURE__*/_react.default.createElement(_antd.Table, _extends({}, getTableProps(), {
    rowKey: rowKey,
    tableLayout: tableLayout
  }));
  /** 自定义的 render */

  var tableDom = props.tableViewRender ? props.tableViewRender(_objectSpread(_objectSpread({}, getTableProps()), {}, {
    rowSelection: rowSelection !== false ? rowSelection : undefined
  }), baseTableDom) : baseTableDom;
  /** Table 区域的 dom，为了方便 render */

  var tableAreaDom = /*#__PURE__*/_react.default.createElement(_antd.Card, _extends({
    bordered: (0, _utils.isBordered)('table', cardBordered),
    style: {
      height: '100%'
    },
    bodyStyle: toolbarDom ? {
      paddingTop: 0,
      paddingBottom: 0
    } : {
      padding: 0
    }
  }, cardProps), toolbarDom, alertDom, tableDom);

  var renderTable = function renderTable() {
    if (props.tableRender) {
      return props.tableRender(props, tableAreaDom, {
        toolbar: toolbarDom || undefined,
        alert: alertDom || undefined,
        table: tableDom || undefined
      });
    }

    return tableAreaDom;
  };

  var proTableDom = /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(className, _defineProperty({}, "".concat(className, "-polling"), action.pollingLoading)),
    style: style,
    ref: rootRef
  }, isLightFilter ? null : searchNode, type !== 'form' && props.tableExtraRender && action.dataSource && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(className, "-extra")
  }, props.tableExtraRender(props, action.dataSource)), type !== 'form' && renderTable()); // 如果不需要的全屏，ConfigProvider 没有意义


  if (!options || !(options === null || options === void 0 ? void 0 : options.fullScreen)) {
    return proTableDom;
  }

  return /*#__PURE__*/_react.default.createElement(_antd.ConfigProvider, {
    getPopupContainer: function getPopupContainer() {
      return rootRef.current || document.body;
    }
  }, proTableDom);
}

var ProTable = function ProTable(props) {
  var _props$expandable;

  var cardBordered = props.cardBordered,
      request = props.request,
      propsClassName = props.className,
      _props$params = props.params,
      params = _props$params === void 0 ? {} : _props$params,
      defaultData = props.defaultData,
      headerTitle = props.headerTitle,
      postData = props.postData,
      propsPagination = props.pagination,
      propsActionRef = props.actionRef,
      _props$columns2 = props.columns,
      propsColumns = _props$columns2 === void 0 ? [] : _props$columns2,
      toolBarRender = props.toolBarRender,
      onLoad = props.onLoad,
      onRequestError = props.onRequestError,
      style = props.style,
      cardProps = props.cardProps,
      tableStyle = props.tableStyle,
      tableClassName = props.tableClassName,
      columnsStateMap = props.columnsStateMap,
      onColumnsStateChange = props.onColumnsStateChange,
      options = props.options,
      search = props.search,
      onLoadingChange = props.onLoadingChange,
      _props$rowSelection = props.rowSelection,
      propsRowSelection = _props$rowSelection === void 0 ? false : _props$rowSelection,
      beforeSearchSubmit = props.beforeSearchSubmit,
      tableAlertRender = props.tableAlertRender,
      defaultClassName = props.defaultClassName,
      propRef = props.formRef,
      _props$type = props.type,
      type = _props$type === void 0 ? 'table' : _props$type,
      _props$columnEmptyTex = props.columnEmptyText,
      columnEmptyText = _props$columnEmptyTex === void 0 ? '-' : _props$columnEmptyTex,
      toolbar = props.toolbar,
      rowKey = props.rowKey,
      manualRequest = props.manualRequest,
      polling = props.polling,
      tooltip = props.tooltip,
      rest = _objectWithoutProperties(props, ["cardBordered", "request", "className", "params", "defaultData", "headerTitle", "postData", "pagination", "actionRef", "columns", "toolBarRender", "onLoad", "onRequestError", "style", "cardProps", "tableStyle", "tableClassName", "columnsStateMap", "onColumnsStateChange", "options", "search", "onLoadingChange", "rowSelection", "beforeSearchSubmit", "tableAlertRender", "defaultClassName", "formRef", "type", "columnEmptyText", "toolbar", "rowKey", "manualRequest", "polling", "tooltip"]);

  var className = (0, _classnames.default)(defaultClassName, propsClassName);
  /** 通用的来操作子节点的工具类 */

  var actionRef = (0, _react.useRef)();
  var defaultFormRef = (0, _react.useRef)();
  var formRef = propRef || defaultFormRef;
  (0, _react.useEffect)(function () {
    if (typeof propsActionRef === 'function' && actionRef.current) {
      propsActionRef(actionRef.current);
    }
  }, [propsActionRef]);
  /** 单选多选的相关逻辑 */

  var _useMountMergeState = (0, _proUtils.useMountMergeState)([], {
    value: propsRowSelection ? propsRowSelection.selectedRowKeys : undefined
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      selectedRowKeys = _useMountMergeState2[0],
      setSelectedRowKeys = _useMountMergeState2[1];

  var selectedRowsRef = (0, _react.useRef)([]);
  var setSelectedRowsAndKey = (0, _react.useCallback)(function (keys, rows) {
    setSelectedRowKeys(keys);
    selectedRowsRef.current = rows;
  }, [setSelectedRowKeys]);

  var _useMountMergeState3 = (0, _proUtils.useMountMergeState)(function () {
    // 如果手动模式，或者 search 不存在的时候设置为 undefined
    // undefined 就不会触发首次加载
    if (manualRequest || search !== false) {
      return undefined;
    }

    return {};
  }),
      _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),
      formSearch = _useMountMergeState4[0],
      setFormSearch = _useMountMergeState4[1];

  var _useMountMergeState5 = (0, _proUtils.useMountMergeState)({}),
      _useMountMergeState6 = _slicedToArray(_useMountMergeState5, 2),
      proFilter = _useMountMergeState6[0],
      setProFilter = _useMountMergeState6[1];

  var _useMountMergeState7 = (0, _proUtils.useMountMergeState)({}),
      _useMountMergeState8 = _slicedToArray(_useMountMergeState7, 2),
      proSort = _useMountMergeState8[0],
      setProSort = _useMountMergeState8[1];
  /** 设置默认排序和筛选值 */


  (0, _react.useEffect)(function () {
    var _parseDefaultColumnCo = (0, _utils.parseDefaultColumnConfig)(propsColumns),
        sort = _parseDefaultColumnCo.sort,
        filter = _parseDefaultColumnCo.filter;

    setProFilter(filter);
    setProSort(sort); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  /** 获取 table 的 dom ref */

  var rootRef = (0, _react.useRef)(null);
  var intl = (0, _proProvider.useIntl)();
  /** 需要初始化 不然默认可能报错 这里取了 defaultCurrent 和 current 为了保证不会重复刷新 */

  var fetchPagination = _typeof(propsPagination) === 'object' ? propsPagination : {
    defaultCurrent: 1,
    defaultPageSize: 20,
    pageSize: 20,
    current: 1
  }; // ============================ useFetchData ============================

  var fetchData = (0, _react.useMemo)(function () {
    if (!request) return undefined;
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(pageParams) {
        var actionParams, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                actionParams = _objectSpread(_objectSpread(_objectSpread({}, pageParams || {}), formSearch), params); // eslint-disable-next-line no-underscore-dangle

                delete actionParams._timestamp;
                _context.next = 4;
                return request(actionParams, proSort, proFilter);

              case 4:
                response = _context.sent;
                return _context.abrupt("return", response);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  }, [formSearch, params, proFilter, proSort, request]);
  var action = (0, _useFetchData.default)(fetchData, defaultData, {
    pageInfo: propsPagination === false ? false : fetchPagination,
    loading: props.loading,
    dataSource: props.dataSource,
    onDataSourceChange: props.onDataSourceChange,
    onLoad: onLoad,
    onLoadingChange: onLoadingChange,
    onRequestError: onRequestError,
    postData: postData,
    manual: formSearch === undefined,
    polling: polling,
    effects: [(0, _useJsonComparison.stringify)(params), (0, _useJsonComparison.stringify)(formSearch), (0, _useJsonComparison.stringify)(proFilter), (0, _useJsonComparison.stringify)(proSort)],
    debounceTime: props.debounceTime,
    onPageInfoChange: function onPageInfoChange(pageInfo) {
      // 总是触发一下 onChange 和  onShowSizeChange
      if (propsPagination) {
        var _propsPagination$onCh, _propsPagination$onSh;

        propsPagination === null || propsPagination === void 0 ? void 0 : (_propsPagination$onCh = propsPagination.onChange) === null || _propsPagination$onCh === void 0 ? void 0 : _propsPagination$onCh.call(propsPagination, pageInfo.current, pageInfo.pageSize);
        propsPagination === null || propsPagination === void 0 ? void 0 : (_propsPagination$onSh = propsPagination.onShowSizeChange) === null || _propsPagination$onSh === void 0 ? void 0 : _propsPagination$onSh.call(propsPagination, pageInfo.current, pageInfo.pageSize);
      }
    }
  }); // ============================ END ============================

  /** 页面编辑的计算 */

  var pagination = (0, _react.useMemo)(function () {
    var pageConfig = _objectSpread(_objectSpread({}, action.pageInfo), {}, {
      setPageInfo: function setPageInfo(_ref3) {
        var pageSize = _ref3.pageSize,
            current = _ref3.current;
        var pageInfo = action.pageInfo; // pageSize 发生改变，并且你不是在第一页，切回到第一页
        // 这样可以防止出现 跳转到一个空的数据页的问题

        if (pageSize === pageInfo.pageSize || pageInfo.current === 1) {
          action.setPageInfo({
            pageSize: pageSize,
            current: current
          });
          return;
        } // 通过request的时候清空数据，然后刷新不然可能会导致 pageSize 没有数据多


        if (request) action.setDataSource([]);
        requestAnimationFrame(function () {
          action.setPageInfo({
            pageSize: pageSize,
            current: 1
          });
        });
      }
    });

    return (0, _utils.mergePagination)(propsPagination, pageConfig, intl); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [propsPagination, action, intl]);

  var counter = _container.default.useContainer();
  /** 清空所有的选中项 */


  var _onCleanSelected = (0, _react.useCallback)(function () {
    if (propsRowSelection && propsRowSelection.onChange) {
      propsRowSelection.onChange([], []);
    }

    setSelectedRowsAndKey([], []);
  }, [propsRowSelection, setSelectedRowsAndKey]);

  counter.setAction(actionRef.current);
  counter.propsRef.current = props; // ============================ RowKey ============================

  var getRowKey = _react.default.useMemo(function () {
    if (typeof rowKey === 'function') {
      return rowKey;
    }

    return function (record, index) {
      var _record$rowKey;

      return (_record$rowKey = record === null || record === void 0 ? void 0 : record[rowKey]) !== null && _record$rowKey !== void 0 ? _record$rowKey : index;
    };
  }, [rowKey]);
  /** 可编辑行的相关配置 */


  var editableUtils = (0, _proUtils.useEditableArray)(_objectSpread(_objectSpread({}, props.editable), {}, {
    getRowKey: getRowKey,
    childrenColumnName: (_props$expandable = props.expandable) === null || _props$expandable === void 0 ? void 0 : _props$expandable.childrenColumnName,
    dataSource: action.dataSource || [],
    setDataSource: function setDataSource(data) {
      var _props$editable2, _props$editable2$onVa;

      (_props$editable2 = props.editable) === null || _props$editable2 === void 0 ? void 0 : (_props$editable2$onVa = _props$editable2.onValuesChange) === null || _props$editable2$onVa === void 0 ? void 0 : _props$editable2$onVa.call(_props$editable2, undefined, data);
      action.setDataSource(data);
    }
  }));
  /** 绑定 action */

  (0, _utils.useActionType)(actionRef, action, {
    fullScreen: function fullScreen() {
      if (!rootRef.current || !document.fullscreenEnabled) {
        return;
      }

      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        rootRef.current.requestFullscreen();
      }
    },
    onCleanSelected: function onCleanSelected() {
      // 清空选中行
      _onCleanSelected();
    },
    resetAll: function resetAll() {
      var _formRef$current;

      // 清空选中行
      _onCleanSelected(); // 清空筛选


      setProFilter({}); // 清空排序

      setProSort({}); // 清空 toolbar 搜索

      counter.setKeyWords(undefined); // 重置页码

      action.setPageInfo({
        current: 1
      }); // 重置表单

      formRef === null || formRef === void 0 ? void 0 : (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.resetFields();
      setFormSearch({});
    },
    editableUtils: editableUtils
  });

  if (propsActionRef) {
    // @ts-ignore
    propsActionRef.current = actionRef.current;
  } // ---------- 列计算相关 start  -----------------


  var tableColumn = (0, _react.useMemo)(function () {
    return (0, _genProColumnToColumn.genProColumnToColumn)({
      columns: propsColumns,
      counter: counter,
      columnEmptyText: columnEmptyText,
      type: type,
      editableUtils: editableUtils
    }).sort((0, _columnSort.columnSort)(counter.columnsMap)); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [propsColumns, counter, columnEmptyText, type, editableUtils.editableKeys && editableUtils.editableKeys.join(',')]);
  /** Table Column 变化的时候更新一下，这个参数将会用于渲染 */

  (0, _proUtils.useDeepCompareEffect)(function () {
    if (tableColumn && tableColumn.length > 0) {
      // 重新生成key的字符串用于排序
      var columnKeys = tableColumn.map(function (item) {
        return (0, _utils.genColumnKey)(item.key, item.index);
      });
      counter.setSortKeyColumns(columnKeys);
    }
  }, [tableColumn]);
  /** 同步 Pagination，支持受控的 页码 和 pageSize */

  (0, _proUtils.useDeepCompareEffect)(function () {
    var pageInfo = action.pageInfo;

    var _ref4 = propsPagination || {},
        _ref4$current = _ref4.current,
        current = _ref4$current === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current : _ref4$current,
        _ref4$pageSize = _ref4.pageSize,
        pageSize = _ref4$pageSize === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize : _ref4$pageSize;

    if (propsPagination && (current || pageSize) && (pageSize !== (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize) || current !== (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current))) {
      action.setPageInfo({
        pageSize: pageSize || pageInfo.pageSize,
        current: current || pageInfo.current
      });
    }
  }, [propsPagination && propsPagination.pageSize, propsPagination && propsPagination.current]);
  /** 行选择相关的问题 */

  var rowSelection = _objectSpread(_objectSpread({
    selectedRowKeys: selectedRowKeys
  }, propsRowSelection), {}, {
    onChange: function onChange(keys, rows) {
      if (propsRowSelection && propsRowSelection.onChange) {
        propsRowSelection.onChange(keys, rows);
      }

      setSelectedRowsAndKey(keys, rows);
    }
  });
  /** 是不是 LightFilter, LightFilter 有一些特殊的处理 */


  var isLightFilter = search !== false && (search === null || search === void 0 ? void 0 : search.filterType) === 'light';
  var searchNode = search === false && type !== 'form' ? null : /*#__PURE__*/_react.default.createElement(_Form.default, {
    pagination: pagination,
    beforeSearchSubmit: beforeSearchSubmit,
    action: actionRef,
    columns: propsColumns,
    onFormSearchSubmit: function onFormSearchSubmit(values) {
      setFormSearch(values);
    },
    onReset: props.onReset,
    onSubmit: props.onSubmit,
    loading: !!action.loading,
    manualRequest: manualRequest,
    search: search,
    form: props.form,
    formRef: formRef,
    type: props.type || 'table',
    cardBordered: props.cardBordered,
    dateFormatter: props.dateFormatter
  });
  /** 内置的工具栏 */

  var toolbarDom = toolBarRender === false ? null : /*#__PURE__*/_react.default.createElement(_ToolBar.default, {
    headerTitle: headerTitle,
    hideToolbar: options === false && !headerTitle && !toolBarRender && !toolbar && !isLightFilter,
    selectedRows: selectedRowsRef.current,
    selectedRowKeys: selectedRowKeys,
    tableColumn: tableColumn,
    tooltip: tooltip,
    toolbar: toolbar,
    onFormSearchSubmit: setFormSearch,
    searchNode: isLightFilter ? searchNode : null,
    options: options,
    actionRef: actionRef,
    toolBarRender: toolBarRender
  });
  /** 内置的多选操作栏 */

  var alertDom = propsRowSelection !== false ? /*#__PURE__*/_react.default.createElement(_Alert.default, {
    selectedRowKeys: selectedRowKeys,
    selectedRows: selectedRowsRef.current,
    onCleanSelected: _onCleanSelected,
    alertOptionRender: rest.tableAlertOptionRender,
    alertInfoRender: tableAlertRender
  }) : null;
  return /*#__PURE__*/_react.default.createElement(TableRender, _extends({}, props, {
    rootRef: rootRef,
    size: counter.tableSize,
    onSizeChange: counter.setTableSize,
    pagination: pagination,
    searchNode: searchNode,
    rowSelection: propsRowSelection !== false ? rowSelection : undefined,
    className: className,
    tableColumn: tableColumn,
    isLightFilter: isLightFilter,
    action: action,
    alertDom: alertDom,
    toolbarDom: toolbarDom,
    onSortChange: setProSort,
    onFilterChange: setProFilter,
    editableUtils: editableUtils
  }));
};
/**
 * 🏆 Use Ant Design Table like a Pro! 更快 更好 更方便
 *
 * @param props
 */


var ProviderWarp = function ProviderWarp(props) {
  var _useContext = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  return /*#__PURE__*/_react.default.createElement(_container.default.Provider, {
    initialState: props
  }, /*#__PURE__*/_react.default.createElement(_proProvider.ConfigProviderWrap, null, /*#__PURE__*/_react.default.createElement(_proUtils.ErrorBoundary, null, /*#__PURE__*/_react.default.createElement(ProTable, _extends({
    defaultClassName: getPrefixCls('pro-table')
  }, props)))));
};

ProviderWarp.Summary = _antd.Table.Summary;
var _default = ProviderWarp;
exports.default = _default;