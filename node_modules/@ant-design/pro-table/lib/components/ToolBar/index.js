"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@ant-design/icons");

var _antd = require("antd");

var _proProvider = require("@ant-design/pro-provider");

var _react2 = _interopRequireDefault(require("fast-deep-equal/es6/react"));

var _ListToolBar = _interopRequireDefault(require("../ListToolBar"));

var _ColumnSetting = _interopRequireDefault(require("../ColumnSetting"));

require("./index.less");

var _FullscreenIcon = _interopRequireDefault(require("./FullscreenIcon"));

var _DensityIcon = _interopRequireDefault(require("./DensityIcon"));

var _container = _interopRequireDefault(require("../../container"));

var _proUtils = require("@ant-design/pro-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getButtonText(_ref) {
  var intl = _ref.intl;
  return {
    reload: {
      text: intl.getMessage('tableToolBar.reload', '刷新'),
      icon: /*#__PURE__*/_react.default.createElement(_icons.ReloadOutlined, null)
    },
    density: {
      text: intl.getMessage('tableToolBar.density', '表格密度'),
      icon: /*#__PURE__*/_react.default.createElement(_DensityIcon.default, null)
    },
    setting: {
      text: intl.getMessage('tableToolBar.columnSetting', '列设置'),
      icon: /*#__PURE__*/_react.default.createElement(_icons.SettingOutlined, null)
    },
    fullScreen: {
      text: intl.getMessage('tableToolBar.fullScreen', '全屏'),
      icon: /*#__PURE__*/_react.default.createElement(_FullscreenIcon.default, null)
    }
  };
}
/**
 * 渲染默认的 工具栏
 *
 * @param options
 * @param className
 */


function renderDefaultOption(options, defaultOptions, columns) {
  return Object.keys(options).filter(function (item) {
    return item;
  }).map(function (key) {
    var value = options[key];

    if (!value) {
      return null;
    }

    if (key === 'setting') {
      return /*#__PURE__*/_react.default.createElement(_ColumnSetting.default, _extends({}, options[key], {
        columns: columns,
        key: key
      }));
    }

    if (key === 'fullScreen') {
      return /*#__PURE__*/_react.default.createElement("span", {
        key: key,
        onClick: value === true ? defaultOptions[key] : value
      }, /*#__PURE__*/_react.default.createElement(_FullscreenIcon.default, null));
    }

    var optionItem = getButtonText(defaultOptions)[key];

    if (optionItem) {
      return /*#__PURE__*/_react.default.createElement("span", {
        key: key,
        onClick: function onClick() {
          if (value && defaultOptions[key] !== true) {
            if (value !== true) {
              value();
              return;
            }

            defaultOptions[key]();
          }
        }
      }, /*#__PURE__*/_react.default.createElement(_antd.Tooltip, {
        title: optionItem.text
      }, optionItem.icon));
    }

    return null;
  }).filter(function (item) {
    return item;
  });
}

function ToolBar(_ref2) {
  var headerTitle = _ref2.headerTitle,
      tooltip = _ref2.tooltip,
      toolBarRender = _ref2.toolBarRender,
      action = _ref2.action,
      propsOptions = _ref2.options,
      selectedRowKeys = _ref2.selectedRowKeys,
      selectedRows = _ref2.selectedRows,
      toolbar = _ref2.toolbar,
      onSearch = _ref2.onSearch,
      columns = _ref2.columns,
      rest = _objectWithoutProperties(_ref2, ["headerTitle", "tooltip", "toolBarRender", "action", "options", "selectedRowKeys", "selectedRows", "toolbar", "onSearch", "columns"]);

  var counter = _container.default.useContainer();

  var intl = (0, _proProvider.useIntl)();
  var optionDom = (0, _react.useMemo)(function () {
    var defaultOptions = {
      reload: function reload() {
        var _action$current;

        return action === null || action === void 0 ? void 0 : (_action$current = action.current) === null || _action$current === void 0 ? void 0 : _action$current.reload();
      },
      density: true,
      setting: true,
      search: false,
      fullScreen: function fullScreen() {
        var _action$current2, _action$current2$full;

        return action === null || action === void 0 ? void 0 : (_action$current2 = action.current) === null || _action$current2 === void 0 ? void 0 : (_action$current2$full = _action$current2.fullScreen) === null || _action$current2$full === void 0 ? void 0 : _action$current2$full.call(_action$current2);
      }
    };

    if (propsOptions === false) {
      return [];
    }

    var options = _objectSpread(_objectSpread({}, defaultOptions), {}, {
      fullScreen: false
    }, propsOptions);

    return renderDefaultOption(options, _objectSpread(_objectSpread({}, defaultOptions), {}, {
      intl: intl
    }), columns);
  }, [action, columns, intl, propsOptions]); // 操作列表

  var actions = toolBarRender ? toolBarRender(action === null || action === void 0 ? void 0 : action.current, {
    selectedRowKeys: selectedRowKeys,
    selectedRows: selectedRows
  }) : [];
  var searchConfig = (0, _react.useMemo)(function () {
    if (!propsOptions) {
      return false;
    }

    if (!propsOptions.search) return false;
    /** 受控的value 和 onChange */

    var defaultSearchConfig = {
      value: counter.keyWords,
      onChange: function onChange(e) {
        return counter.setKeyWords(e.target.value);
      }
    };
    if (propsOptions.search === true) return defaultSearchConfig;
    return _objectSpread(_objectSpread({}, defaultSearchConfig), propsOptions.search);
  }, [counter, propsOptions]);
  (0, _react.useEffect)(function () {
    if (counter.keyWords === undefined) {
      onSearch === null || onSearch === void 0 ? void 0 : onSearch('');
    }
  }, [counter.keyWords, onSearch]);
  return /*#__PURE__*/_react.default.createElement(_ListToolBar.default, _extends({
    title: headerTitle,
    tooltip: tooltip || rest.tip,
    search: searchConfig,
    onSearch: onSearch,
    actions: actions,
    settings: optionDom
  }, toolbar));
}
/** 这里负责与table交互，并且减少 render次数 */


var ToolbarRender = /*#__PURE__*/function (_React$Component) {
  _inherits(ToolbarRender, _React$Component);

  var _super = _createSuper(ToolbarRender);

  function ToolbarRender() {
    var _this;

    _classCallCheck(this, ToolbarRender);

    _this = _super.apply(this, arguments);

    _this.onSearch = function (keyword) {
      var _actionRef$current, _actionRef$current$se;

      var _this$props = _this.props,
          options = _this$props.options,
          onFormSearchSubmit = _this$props.onFormSearchSubmit,
          actionRef = _this$props.actionRef;

      if (!options || !options.search) {
        return;
      }

      var _ref3 = options.search === true ? {} : options.search,
          _ref3$name = _ref3.name,
          name = _ref3$name === void 0 ? 'keyword' : _ref3$name; // 查询的时候的回到第一页


      actionRef === null || actionRef === void 0 ? void 0 : (_actionRef$current = actionRef.current) === null || _actionRef$current === void 0 ? void 0 : (_actionRef$current$se = _actionRef$current.setPageInfo) === null || _actionRef$current$se === void 0 ? void 0 : _actionRef$current$se.call(_actionRef$current, {
        current: 1
      });
      onFormSearchSubmit((0, _proUtils.omitUndefined)(_defineProperty({
        // ...formSearch,
        _timestamp: Date.now()
      }, name, keyword)));
    };

    _this.isEquals = function (next) {
      var _this$props2 = _this.props,
          hideToolbar = _this$props2.hideToolbar,
          tableColumn = _this$props2.tableColumn,
          options = _this$props2.options,
          tooltip = _this$props2.tooltip,
          toolbar = _this$props2.toolbar,
          selectedRows = _this$props2.selectedRows,
          selectedRowKeys = _this$props2.selectedRowKeys,
          headerTitle = _this$props2.headerTitle,
          actionRef = _this$props2.actionRef,
          toolBarRender = _this$props2.toolBarRender;
      return (0, _react2.default)({
        hideToolbar: hideToolbar,
        tableColumn: tableColumn,
        options: options,
        tooltip: tooltip,
        toolbar: toolbar,
        selectedRows: selectedRows,
        selectedRowKeys: selectedRowKeys,
        headerTitle: headerTitle,
        actionRef: actionRef,
        toolBarRender: toolBarRender
      }, {
        hideToolbar: next.hideToolbar,
        tableColumn: next.tableColumn,
        options: next.options,
        tooltip: next.tooltip,
        toolbar: next.toolbar,
        selectedRows: next.selectedRows,
        selectedRowKeys: next.selectedRowKeys,
        headerTitle: next.headerTitle,
        actionRef: next.actionRef,
        toolBarRender: next.toolBarRender
      });
    };

    _this.shouldComponentUpdate = function (next) {
      if (next.searchNode) {
        return true;
      }

      return !_this.isEquals(next);
    };

    _this.render = function () {
      var _this$props3 = _this.props,
          hideToolbar = _this$props3.hideToolbar,
          tableColumn = _this$props3.tableColumn,
          options = _this$props3.options,
          searchNode = _this$props3.searchNode,
          tooltip = _this$props3.tooltip,
          toolbar = _this$props3.toolbar,
          selectedRows = _this$props3.selectedRows,
          selectedRowKeys = _this$props3.selectedRowKeys,
          headerTitle = _this$props3.headerTitle,
          actionRef = _this$props3.actionRef,
          toolBarRender = _this$props3.toolBarRender; // 不展示 toolbar

      if (hideToolbar) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(ToolBar, {
        tooltip: tooltip,
        columns: tableColumn,
        options: options,
        headerTitle: headerTitle,
        action: actionRef,
        onSearch: _this.onSearch,
        selectedRows: selectedRows,
        selectedRowKeys: selectedRowKeys,
        toolBarRender: toolBarRender,
        toolbar: _objectSpread({
          filter: searchNode
        }, toolbar)
      });
    };

    return _this;
  }

  return ToolbarRender;
}(_react.default.Component);

var _default = ToolbarRender;
exports.default = _default;