"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.genProColumnToColumn = genProColumnToColumn;

var _proUtils = require("@ant-design/pro-utils");

var _react = _interopRequireDefault(require("fast-deep-equal/es6/react"));

var _get = _interopRequireDefault(require("rc-util/lib/utils/get"));

var _proField = require("@ant-design/pro-field");

var _index = require("./index");

var _columnRender = require("./columnRender");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 转化 columns 到 pro 的格式 主要是 render 方法的自行实现
 *
 * @param columns
 * @param map
 * @param columnEmptyText
 */
function genProColumnToColumn(props) {
  var columns = props.columns,
      counter = props.counter,
      columnEmptyText = props.columnEmptyText,
      type = props.type,
      editableUtils = props.editableUtils;
  return columns.map(function (columnProps, columnsIndex) {
    var key = columnProps.key,
        dataIndex = columnProps.dataIndex,
        valueEnum = columnProps.valueEnum,
        _columnProps$valueTyp = columnProps.valueType,
        valueType = _columnProps$valueTyp === void 0 ? 'text' : _columnProps$valueTyp,
        children = columnProps.children,
        onFilter = columnProps.onFilter,
        _columnProps$filters = columnProps.filters,
        filters = _columnProps$filters === void 0 ? [] : _columnProps$filters;
    var columnKey = (0, _index.genColumnKey)(key, columnsIndex); // 这些都没有，说明是普通的表格不需要 pro 管理

    var noNeedPro = !valueEnum && !valueType && !children;

    if (noNeedPro) {
      return _objectSpread({
        index: columnsIndex
      }, columnProps);
    }

    var config = counter.columnsMap[columnKey] || {
      fixed: columnProps.fixed
    };

    var genOnFilter = function genOnFilter() {
      if (onFilter === true) {
        return function (value, row) {
          return (0, _columnRender.defaultOnFilter)(value, row, dataIndex);
        };
      }

      return (0, _proUtils.omitBoolean)(onFilter);
    };

    var tempColumns = _objectSpread(_objectSpread({
      index: columnsIndex,
      shouldCellUpdate: function shouldCellUpdate(rowData, preRowData) {
        var _editableUtils$isEdit = editableUtils.isEditable(_objectSpread(_objectSpread({}, rowData), {}, {
          index: columnsIndex
        })),
            isEditable = _editableUtils$isEdit.isEditable,
            preIsEditable = _editableUtils$isEdit.preIsEditable;

        if (isEditable !== preIsEditable) {
          return true;
        }

        if (!columnProps.render && !columnProps.renderFormItem) {
          return false;
        }

        var cellName = [dataIndex || columnsIndex].flat(1);
        return !(0, _react.default)((0, _get.default)(rowData, cellName), (0, _get.default)(preRowData, cellName));
      }
    }, columnProps), {}, {
      title: (0, _columnRender.renderColumnsTitle)(columnProps),
      valueEnum: valueEnum,
      filters: filters === true ? (0, _proField.proFieldParsingValueEnumToArray)((0, _proUtils.runFunction)(valueEnum, undefined)).filter(function (valueItem) {
        return valueItem && valueItem.value !== 'all';
      }) : filters,
      onFilter: genOnFilter(),
      ellipsis: false,
      fixed: config.fixed,
      width: columnProps.width || (columnProps.fixed ? 200 : undefined),
      children: columnProps.children ? genProColumnToColumn(_objectSpread(_objectSpread({}, props), {}, {
        columns: columnProps === null || columnProps === void 0 ? void 0 : columnProps.children
      })) : undefined,
      render: function render(text, rowData, index) {
        var renderProps = {
          columnProps: columnProps,
          text: text,
          rowData: rowData,
          index: index,
          columnEmptyText: columnEmptyText,
          counter: counter,
          type: type,
          editableUtils: editableUtils
        };
        return (0, _columnRender.columnRender)(renderProps);
      }
    });

    return (0, _proUtils.omitUndefinedAndEmptyArr)(tempColumns);
  }).filter(function (item) {
    return !item.hideInTable;
  });
}