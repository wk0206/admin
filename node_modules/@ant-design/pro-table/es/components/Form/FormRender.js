import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext, useMemo } from 'react';
import classNames from 'classnames';
import omit from 'omit.js';
import { BetaSchemaForm } from '@ant-design/pro-form';
import './index.less';

function toLowerLine(str) {
  var temp = str.replace(/[A-Z]/g, function (match) {
    return "-".concat(match.toLowerCase());
  });

  if (temp.startsWith('-')) {
    // 如果首字母是大写，执行replace时会多一个_，这里需要去掉
    temp = temp.slice(1);
  }

  return temp;
}
/**
 * 获取当前选择的 Form Layout 配置
 *
 * @param isForm
 * @param searchConfig
 * @returns LightFilter | QueryFilter | ProForm
 */


var getFormCompetent = function getFormCompetent(isForm, searchConfig) {
  if (!isForm && searchConfig !== false) {
    if ((searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.filterType) === 'light') {
      return 'LightFilter';
    }

    return 'QueryFilter';
  }

  return 'Form';
};
/**
 * 获取需要传给相应表单的props
 *
 * @param searchConfig
 * @param name
 */


var getFromProps = function getFromProps(isForm, searchConfig, name) {
  if (!isForm && name === 'LightFilter') {
    // 传给 lightFilter 的问题
    return omit(_objectSpread({}, searchConfig), ['labelWidth', 'defaultCollapsed', 'filterType']);
  }

  if (!isForm) {
    // 传给 QueryFilter 的配置
    return omit(_objectSpread({
      labelWidth: searchConfig ? searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.labelWidth : undefined,
      defaultCollapsed: true
    }, searchConfig), ['filterType']);
  }

  return {};
};
/**
 * 从formConfig中获取传给相应表单的配置
 *
 * @param isForm
 * @param formConfig
 */


var getFormConfigs = function getFormConfigs(isForm, formConfig) {
  if (isForm) {
    // 传给Form的配置
    return omit(formConfig, ['ignoreRules']);
  } // 传给Filter的配置


  return _objectSpread({
    ignoreRules: true
  }, formConfig);
};
/**
 * 这里会把 列配置转化为 form 表单
 *
 * @param param0
 * @returns
 */


var FormRender = function FormRender(_ref) {
  var _classNames;

  var onSubmit = _ref.onSubmit,
      formRef = _ref.formRef,
      _ref$dateFormatter = _ref.dateFormatter,
      dateFormatter = _ref$dateFormatter === void 0 ? 'string' : _ref$dateFormatter,
      type = _ref.type,
      columns = _ref.columns,
      action = _ref.action,
      manualRequest = _ref.manualRequest,
      _onReset = _ref.onReset,
      submitButtonLoading = _ref.submitButtonLoading,
      searchConfig = _ref.search,
      _ref$form = _ref.form,
      formConfig = _ref$form === void 0 ? {} : _ref$form,
      bordered = _ref.bordered;
  var isForm = type === 'form';
  /** 提交表单，根据两种模式不同，方法不相同 */

  var submit = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(values, firstLoad) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (onSubmit) {
                onSubmit(values, firstLoad);
              }

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function submit(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var columnsList = useMemo(function () {
    return columns.filter(function (item) {
      if ((item.hideInSearch || item.search === false) && type !== 'form') {
        return false;
      }

      if (type === 'form' && item.hideInForm) {
        return false;
      }

      return true;
    }).map(function (item) {
      var finalValueType = !item.valueType || ['textarea', 'jsonCode', 'code'].includes(item.valueType) && type === 'table' ? 'text' : item.valueType;
      return _objectSpread(_objectSpread(_objectSpread({}, item), {}, {
        width: undefined
      }, item.search ? item.search : {}), {}, {
        valueType: finalValueType
      });
    });
  }, [columns, type]);
  var className = getPrefixCls('pro-table-search');
  var formClassName = getPrefixCls('pro-table-form');
  var competentName = useMemo(function () {
    return getFormCompetent(isForm, searchConfig);
  }, [searchConfig, isForm]); // 传给每个表单的配置，理论上大家都需要

  var loadingProps = useMemo(function () {
    return {
      submitter: {
        submitButtonProps: {
          loading: submitButtonLoading
        }
      }
    };
  }, [submitButtonLoading]);
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(className, (_classNames = {}, _defineProperty(_classNames, formClassName, isForm), _defineProperty(_classNames, getPrefixCls("pro-table-search-".concat(toLowerLine(competentName))), true), _defineProperty(_classNames, "".concat(getPrefixCls('card'), "-bordered"), !!bordered), _defineProperty(_classNames, searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.className, searchConfig !== false && (searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.className)), _classNames))
  }, /*#__PURE__*/React.createElement(BetaSchemaForm, _extends({
    layoutType: competentName,
    columns: columnsList,
    type: type
  }, loadingProps, getFromProps(isForm, searchConfig, competentName), getFormConfigs(isForm, formConfig), {
    formRef: formRef,
    action: action,
    dateFormatter: dateFormatter,
    onInit: function onInit(values) {
      // 触发一个 submit，之所以这里触发是为了保证 value 都被 format了
      if (type !== 'form') {
        var _action$current, _action$current2, _action$current2$setP;

        // 修改 pageSize，变成从 url 中获取的
        var pageInfo = (_action$current = action.current) === null || _action$current === void 0 ? void 0 : _action$current.pageInfo;
        var _values$current = values.current,
            current = _values$current === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current : _values$current,
            _values$pageSize = values.pageSize,
            pageSize = _values$pageSize === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize : _values$pageSize;
        (_action$current2 = action.current) === null || _action$current2 === void 0 ? void 0 : (_action$current2$setP = _action$current2.setPageInfo) === null || _action$current2$setP === void 0 ? void 0 : _action$current2$setP.call(_action$current2, _objectSpread(_objectSpread({}, pageInfo), {}, {
          current: parseInt(current, 10),
          pageSize: parseInt(pageSize, 10)
        }));
        /** 如果是手动模式不需要提交 */

        if (manualRequest) return;
        submit(values, true);
      }
    },
    onReset: function onReset(values) {
      _onReset === null || _onReset === void 0 ? void 0 : _onReset(values);
    },
    onFinish: function onFinish(values) {
      submit(values, false);
    },
    initialValues: formConfig.initialValues
  })));
};

export default FormRender;