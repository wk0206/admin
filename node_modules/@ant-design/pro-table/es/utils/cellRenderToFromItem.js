import "antd/es/form/style";
import _Form from "antd/es/form";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ProField from '@ant-design/pro-field';
import isDeepEqualReact from 'fast-deep-equal/es6/react';
import { runFunction } from '@ant-design/pro-utils';
import { getFieldPropsOrFormItemProps, InlineErrorFormItem } from '@ant-design/pro-utils';
import get from "rc-util/es/utils/get";
var SHOW_EMPTY_TEXT_LIST = ['', null, undefined];
/**
 * 拼接用于编辑的 key
 *
 * @param base 基本的 key
 * @param dataIndex 需要拼接的key
 */

export var spellNamePath = function spellNamePath(base, dataIndex) {
  return [base, dataIndex].flat(1);
};
/**
 * 根据不同的类型来转化数值
 *
 * @param text
 * @param valueType
 */

function cellRenderToFromItem(config) {
  var _columnProps$dataInde;

  var text = config.text,
      valueType = config.valueType,
      rowData = config.rowData,
      columnProps = config.columnProps; // 如果 valueType === text ，没必要多走一次 render

  if ((!valueType || ['textarea', 'text'].includes(valueType.toString())) && // valueEnum 存在说明是个select
  !(columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueEnum) && config.mode === 'read') {
    // 如果是''、null、undefined 显示columnEmptyText
    return SHOW_EMPTY_TEXT_LIST.includes(text) ? config.columnEmptyText : text;
  }

  if (typeof valueType === 'function' && rowData) {
    // 防止valueType是函数,并且text是''、null、undefined跳过显式设置的columnEmptyText
    return cellRenderToFromItem(_objectSpread(_objectSpread({}, config), {}, {
      valueType: valueType(rowData, config.type) || 'text'
    }));
  }
  /** 生成公用的 proField dom 配置 */


  var proFieldProps = {
    valueEnum: runFunction(columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueEnum, rowData),
    request: columnProps === null || columnProps === void 0 ? void 0 : columnProps.request,
    params: columnProps === null || columnProps === void 0 ? void 0 : columnProps.params,
    proFieldKey: "table-field-".concat((columnProps === null || columnProps === void 0 ? void 0 : (_columnProps$dataInde = columnProps.dataIndex) === null || _columnProps$dataInde === void 0 ? void 0 : _columnProps$dataInde.toString()) || (columnProps === null || columnProps === void 0 ? void 0 : columnProps.key)),
    text: valueType === 'index' || valueType === 'indexBorder' ? config.index : text,
    mode: config.mode,
    emptyText: config.columnEmptyText,
    renderFormItem: undefined,
    valueType: valueType
  };
  /** 只读模式直接返回就好了，不需要处理 formItem */

  if (config.mode !== 'edit') {
    return /*#__PURE__*/React.createElement(ProField, _extends({
      fieldProps: getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps, null, columnProps)
    }, proFieldProps));
  } // 如果是编辑模式，需要用 Form.Item 包一下


  return /*#__PURE__*/React.createElement(_Form.Item, {
    // 一般而言是没有跨行依赖的，所以这里比较行来判断是否应该刷新
    // 对多行编辑有巨大的性能提升
    shouldUpdate: function shouldUpdate(pre, next) {
      if (!(columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps) && !(columnProps === null || columnProps === void 0 ? void 0 : columnProps.formItemProps) && !(columnProps === null || columnProps === void 0 ? void 0 : columnProps.renderFormItem)) {
        return false;
      }

      var name = [config.recordKey].flat(1);
      return !isDeepEqualReact(get(pre, name), get(next, name));
    },
    noStyle: true
  }, function (form) {
    var _columnProps$renderFo;

    var shouldUpdate = function shouldUpdate(pre, next) {
      var rowName = [config.recordKey].flat(1);
      return !isDeepEqualReact(get(pre, rowName), get(next, rowName));
    };

    var name = spellNamePath(config.recordKey || config.index, (columnProps === null || columnProps === void 0 ? void 0 : columnProps.key) || (columnProps === null || columnProps === void 0 ? void 0 : columnProps.dataIndex) || config.index);
    /** 获取 formItemProps Props */

    var formItemProps = getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.formItemProps, form, _objectSpread(_objectSpread({
      rowKey: config.recordKey || config.index,
      rowIndex: config.index
    }, columnProps), {}, {
      isEditable: true
    }));

    var messageVariables = _objectSpread({
      label: (columnProps === null || columnProps === void 0 ? void 0 : columnProps.title) || '此项',
      type: (columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueType) || '文本'
    }, formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.messageVariables);

    var inputDom = /*#__PURE__*/React.createElement(ProField, _extends({
      fieldProps: getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps, form, _objectSpread(_objectSpread({}, columnProps), {}, {
        rowKey: config.recordKey || config.index,
        rowIndex: config.index,
        isEditable: true
      }))
    }, proFieldProps));
    /** 如果没有自定义直接返回 */

    if (!(columnProps === null || columnProps === void 0 ? void 0 : columnProps.renderFormItem)) {
      return /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
        shouldUpdate: shouldUpdate,
        errorType: "popover",
        name: name
      }, formItemProps, {
        messageVariables: messageVariables,
        initialValue: text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue
      }), inputDom);
    }
    /** RenderFormItem 需要被自定义的时候执行，defaultRender 比较麻烦所以这里多包一点 */


    var renderDom = (_columnProps$renderFo = columnProps.renderFormItem) === null || _columnProps$renderFo === void 0 ? void 0 : _columnProps$renderFo.call(columnProps, _objectSpread(_objectSpread({}, columnProps), {}, {
      index: config.index,
      isEditable: true,
      type: 'table'
    }), {
      defaultRender: function defaultRender() {
        return /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
          shouldUpdate: shouldUpdate,
          errorType: "popover",
          name: name
        }, formItemProps, {
          messageVariables: messageVariables,
          initialValue: text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue
        }), inputDom);
      },
      type: 'form',
      recordKey: config.recordKey,
      record: form.getFieldValue([config.recordKey || config.index]),
      isEditable: true
    }, form);
    return /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
      errorType: "popover",
      shouldUpdate: shouldUpdate,
      name: spellNamePath(config.recordKey || config.index, (columnProps === null || columnProps === void 0 ? void 0 : columnProps.key) || (columnProps === null || columnProps === void 0 ? void 0 : columnProps.dataIndex) || config.index)
    }, formItemProps, {
      initialValue: text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue,
      messageVariables: messageVariables
    }), renderDom);
  });
}

export default cellRenderToFromItem;