import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/typography/style";
import _Typography from "antd/es/typography";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import isDeepEqualReact from 'fast-deep-equal/es6/react';
import { isNil } from '@ant-design/pro-utils';
import cellRenderToFromItem from './cellRenderToFromItem';
import { LabelIconTip } from '@ant-design/pro-utils';
import get from "rc-util/es/utils/get";
import { isMergeCell } from '.';
/**
 * 增加了 icon 的功能 render title
 *
 * @param item
 */

export var renderColumnsTitle = function renderColumnsTitle(item) {
  var title = item.title;

  if (title && typeof title === 'function') {
    return title(item, 'table', /*#__PURE__*/React.createElement(LabelIconTip, {
      label: title,
      tooltip: item.tooltip || item.tip
    }));
  }

  return /*#__PURE__*/React.createElement(LabelIconTip, {
    label: title,
    tooltip: item.tooltip || item.tip
  });
};
/** 判断可不可编辑 */

function isEditableCell(text, rowData, index, editable) {
  if (typeof editable === 'boolean') {
    return editable === false;
  }

  return (editable === null || editable === void 0 ? void 0 : editable(text, rowData, index)) === false;
}
/**
 * 生成 Copyable 或 Ellipsis 的 dom
 *
 * @param dom
 * @param item
 * @param text
 */


export var genCopyable = function genCopyable(dom, item, text) {
  if (item.copyable || item.ellipsis) {
    return /*#__PURE__*/React.createElement(_Typography.Text, {
      style: {
        maxWidth: '100%',
        margin: 0,
        padding: 0
      },
      title: "",
      copyable: item.copyable && text ? {
        text: text,
        tooltips: ['', '']
      } : undefined,
      ellipsis: item.ellipsis && text ? {
        tooltip: text
      } : false
    }, dom);
  }

  return dom;
};
/**
 * 默认的 filter 方法
 *
 * @param value
 * @param record
 * @param dataIndex
 * @returns
 */

export var defaultOnFilter = function defaultOnFilter(value, record, dataIndex) {
  var recordElement = Array.isArray(dataIndex) ? get(record, dataIndex) : record[dataIndex];
  var itemValue = String(recordElement);
  return String(itemValue) === String(value);
};
/**
 * 这个组件负责单元格的具体渲染
 *
 * @param param0
 */

export function columnRender(_ref) {
  var columnProps = _ref.columnProps,
      text = _ref.text,
      rowData = _ref.rowData,
      index = _ref.index,
      columnEmptyText = _ref.columnEmptyText,
      counter = _ref.counter,
      type = _ref.type,
      editableUtils = _ref.editableUtils;
  var action = counter.action;

  var _editableUtils$isEdit = editableUtils.isEditable(_objectSpread(_objectSpread({}, rowData), {}, {
    index: index
  })),
      isEditable = _editableUtils$isEdit.isEditable,
      recordKey = _editableUtils$isEdit.recordKey;

  var _columnProps$renderTe = columnProps.renderText,
      renderText = _columnProps$renderTe === void 0 ? function (val) {
    return val;
  } : _columnProps$renderTe;
  var renderTextStr = renderText(text, rowData, index, action.current);
  var mode = isEditable && !isEditableCell(text, rowData, index, columnProps === null || columnProps === void 0 ? void 0 : columnProps.editable) ? 'edit' : 'read';
  var textDom = cellRenderToFromItem({
    text: renderTextStr,
    valueType: columnProps.valueType || 'text',
    index: index,
    rowData: rowData,
    columnProps: _objectSpread(_objectSpread({}, columnProps), {}, {
      entry: rowData
    }),
    columnEmptyText: columnEmptyText,
    type: type,
    recordKey: recordKey,
    mode: mode
  });
  var dom = mode === 'edit' ? textDom : genCopyable(textDom, columnProps, renderTextStr);
  /** 如果是编辑模式，并且 renderFormItem 存在直接走 renderFormItem */

  if (mode === 'edit') {
    if (columnProps.valueType === 'option') {
      return /*#__PURE__*/React.createElement(_Form.Item, {
        shouldUpdate: function shouldUpdate(prevValues, nextValues) {
          return !isDeepEqualReact(get(prevValues, [recordKey]), get(nextValues, [recordKey]));
        },
        noStyle: true
      }, function (form) {
        return /*#__PURE__*/React.createElement(_Space, {
          size: 16
        }, editableUtils.actionRender(_objectSpread(_objectSpread({}, rowData), {}, {
          index: columnProps.index || index
        }), form));
      });
    }

    return dom;
  }

  if (columnProps.render) {
    var renderDom = columnProps.render(dom, rowData, index, _objectSpread(_objectSpread({}, action.current), editableUtils), _objectSpread(_objectSpread({}, columnProps), {}, {
      isEditable: isEditable,
      type: 'table'
    })); // 如果是合并单元格的，直接返回对象

    if (isMergeCell(renderDom)) {
      return renderDom;
    }

    if (renderDom && columnProps.valueType === 'option' && Array.isArray(renderDom)) {
      return /*#__PURE__*/React.createElement(_Space, {
        size: 16
      }, renderDom);
    }

    return renderDom;
  }

  var isReactRenderNode = /*#__PURE__*/React.isValidElement(dom) || ['string', 'number'].includes(_typeof(dom));
  return !isNil(dom) && isReactRenderNode ? dom : null;
}