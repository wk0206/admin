import "antd/es/popover/style";
import _Popover from "antd/es/popover";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { SketchPicker } from 'react-color';
import React, { useContext } from 'react';
import useMergedState from "rc-util/es/hooks/useMergedState";
export var DEFAULT_COLORS = ['#FF9D4E', '#5BD8A6', '#5B8FF9', '#F7664E', '#FF86B7', '#2B9E9D', '#9270CA', '#6DC8EC', '#667796', '#F6BD16' // 9 - 黄色
];

var ColorPicker = function ColorPicker(_ref) {
  var mode = _ref.mode,
      popoverProps = _ref.popoverProps,
      rest = _objectWithoutProperties(_ref, ["mode", "popoverProps"]);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-color-picker');

  var _useMergedState = useMergedState('#1890ff', {
    value: rest.value,
    onChange: rest.onChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      color = _useMergedState2[0],
      setColor = _useMergedState2[1];

  var readDom = /*#__PURE__*/React.createElement("div", {
    className: prefixCls,
    style: {
      padding: 5,
      width: 48,
      border: '1px solid #ddd',
      borderRadius: '2px',
      cursor: 'pointer'
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      backgroundColor: color,
      width: 36,
      height: 14,
      borderRadius: '2px'
    }
  }));

  if (mode === 'read') {
    return readDom;
  }

  return /*#__PURE__*/React.createElement(_Popover, _extends({
    trigger: "click",
    placement: "right"
  }, popoverProps, {
    content: /*#__PURE__*/React.createElement("div", {
      style: {
        margin: '-12px -16px'
      }
    }, /*#__PURE__*/React.createElement(SketchPicker, _extends({}, rest, {
      presetColors: rest.colors || rest.presetColors || DEFAULT_COLORS,
      color: color,
      onChange: function onChange(_ref2) {
        var hex = _ref2.hex,
            _ref2$rgb = _ref2.rgb,
            r = _ref2$rgb.r,
            g = _ref2$rgb.g,
            b = _ref2$rgb.b,
            a = _ref2$rgb.a;

        if (a && a < 1) {
          setColor("rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")"));
        }

        setColor(hex);
      }
    })))
  }), readDom);
};
/**
 * 颜色组件
 *
 * @param FieldColorPicker {
 *     text: number;
 *     moneySymbol?: string; }
 */


var FieldColorPicker = function FieldColorPicker(_ref3) {
  var text = _ref3.text,
      type = _ref3.mode,
      render = _ref3.render,
      renderFormItem = _ref3.renderFormItem,
      fieldProps = _ref3.fieldProps;

  if (type === 'read') {
    var dom = /*#__PURE__*/React.createElement(ColorPicker, {
      value: text,
      mode: "read"
    });

    if (render) {
      return render(text, _objectSpread({
        mode: type
      }, fieldProps), dom);
    }

    return dom;
  }

  if (type === 'edit' || type === 'update') {
    var _dom = /*#__PURE__*/React.createElement(ColorPicker, fieldProps);

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: type
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

export default FieldColorPicker;