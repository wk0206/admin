import "antd/es/input-number/style";
import _InputNumber from "antd/es/input-number";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useMemo } from 'react';
import { useIntl } from '@ant-design/pro-provider';
var defaultMoneyIntl = new Intl.NumberFormat('zh-Hans-CN', {
  currency: 'CNY',
  style: 'currency'
});
var enMoneyIntl = {
  style: 'currency',
  currency: 'USD'
};
var ruMoneyIntl = {
  style: 'currency',
  currency: 'RUB'
};
var rsMoneyIntl = {
  style: 'currency',
  currency: 'RSD'
};
var msMoneyIntl = {
  style: 'currency',
  currency: 'MYR'
};
var intlMap = {
  default: defaultMoneyIntl,
  'zh-Hans-CN': {
    currency: 'CNY',
    style: 'currency'
  },
  'en-US': enMoneyIntl,
  'ru-RU': ruMoneyIntl,
  'ms-MY': msMoneyIntl,
  'sr-RS': rsMoneyIntl
};

var getTextByLocale = function getTextByLocale(localeStr, paramsText, precision) {
  var moneyText = paramsText;

  if (typeof moneyText === 'string') {
    moneyText = Number(moneyText);
  }

  if (!localeStr) {
    return new Intl.NumberFormat().format(moneyText);
  }

  return new Intl.NumberFormat(localeStr, _objectSpread(_objectSpread({}, intlMap[localeStr || 'zh-Hans-CN'] || intlMap['zh-Hans-CN']), {}, {
    minimumFractionDigits: precision
  })).format(moneyText);
};

var DefaultPrecisionCont = 2;
/**
 * 金额组件
 *
 * @param FieldMoneyProps {
 *     text: number;
 *     moneySymbol?: string; }
 */

var FieldMoney = function FieldMoney(_ref, ref) {
  var _fieldProps$precision;

  var text = _ref.text,
      type = _ref.mode,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? 'zh-Hans-CN' : _ref$locale,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      fieldProps = _ref.fieldProps,
      proFieldKey = _ref.proFieldKey,
      plain = _ref.plain,
      valueEnum = _ref.valueEnum,
      placeholder = _ref.placeholder,
      rest = _objectWithoutProperties(_ref, ["text", "mode", "locale", "render", "renderFormItem", "fieldProps", "proFieldKey", "plain", "valueEnum", "placeholder"]);

  var precision = (_fieldProps$precision = fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.precision) !== null && _fieldProps$precision !== void 0 ? _fieldProps$precision : DefaultPrecisionCont;
  var intl = useIntl();
  var moneySymbol = useMemo(function () {
    var defaultText = intl.getMessage('moneySymbol', '￥');

    if (rest.moneySymbol === false || fieldProps.moneySymbol === false) {
      return undefined;
    }

    return defaultText;
  }, [fieldProps.moneySymbol, intl, rest.moneySymbol]);

  if (type === 'read') {
    var dom = /*#__PURE__*/React.createElement("span", {
      ref: ref
    }, getTextByLocale(moneySymbol ? locale : false, text, precision));

    if (render) {
      return render(text, _objectSpread({
        mode: type
      }, fieldProps), dom);
    }

    return dom;
  }

  if (type === 'edit' || type === 'update') {
    var _dom = /*#__PURE__*/React.createElement(_InputNumber, _extends({
      ref: ref,
      min: 0,
      precision: precision,
      formatter: function formatter(value) {
        if (value) {
          var reg = new RegExp("/B(?=(d{".concat(3 + (precision - DefaultPrecisionCont), "})+(?!d))/g"));
          return "".concat(moneySymbol, " ").concat(value).replace(reg, ',');
        }

        return '';
      },
      parser: function parser(value) {
        return value ? value.replace(new RegExp("\\".concat(moneySymbol, "\\s?|(,*)"), 'g'), '') : '';
      },
      style: {
        width: '100%'
      },
      placeholder: placeholder
    }, fieldProps));

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: type
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldMoney);