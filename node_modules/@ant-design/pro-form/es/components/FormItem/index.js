import "antd/es/form/style";
import _Form from "antd/es/form";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useEffect, useMemo } from 'react';
import { FormListContext } from '../List';
import FieldContext from '../../FieldContext';

var ProFormItem = function ProFormItem(props) {
  var valueType = props.valueType,
      transform = props.transform,
      dataFormat = props.dataFormat,
      ignoreFormItem = props.ignoreFormItem,
      rest = _objectWithoutProperties(props, ["valueType", "transform", "dataFormat", "ignoreFormItem"]);

  var formListField = useContext(FormListContext); // ProFromList 的 filed，里面有name和key

  /** 从 context 中拿到的值 */

  var name = useMemo(function () {
    if (formListField.name !== undefined) {
      return [formListField.name, props.name].flat(1);
    }

    return props.name;
  }, [formListField.name, props.name]);
  /** 从 context 中拿到的值 */

  var _React$useContext = React.useContext(FieldContext),
      setFieldValueType = _React$useContext.setFieldValueType;

  useEffect(function () {
    // 如果 setFieldValueType 和 props.name 不存在不存入
    if (!setFieldValueType || !props.name) {
      return;
    } // Field.type === 'ProField' 时 props 里面是有 valueType 的，所以要设置一下
    // 写一个 ts 比较麻烦，用 any 顶一下


    setFieldValueType([formListField.listName, name].flat(1).filter(function (itemName) {
      return itemName !== undefined;
    }), {
      valueType: valueType || 'text',
      dateFormat: dataFormat,
      transform: transform
    });
  }, [formListField.listName, name, dataFormat, props.name, setFieldValueType, transform, valueType]);

  if (ignoreFormItem) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, props.children);
  }

  return /*#__PURE__*/React.createElement(_Form.Item, _extends({}, rest, {
    name: name
  }), props.children);
};

export default ProFormItem;