function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useMemo, useRef, useState } from 'react';
import { ProFormFieldSet } from '../../index';
import { ProFormGroup, ProFormField } from '../../index';
import { omitUndefined } from '@ant-design/pro-utils';
import { runFunction } from '@ant-design/pro-utils';
import omit from 'omit.js';
import ProForm, { DrawerForm, ModalForm, QueryFilter, LightFilter, StepsForm } from '../../index';
import ProFormList from '../List';
var FormComments = {
  DrawerForm: DrawerForm,
  QueryFilter: QueryFilter,
  LightFilter: LightFilter,
  StepForm: StepsForm.StepForm,
  StepsForm: StepsForm,
  ModalForm: ModalForm
};
/**
 * 此组件可以根据 Json Schema 来生成相应的表单,大部分配置与 antd 的 table 列配置相同
 *
 * @see 此组件仍为 beta 版本，api 可能发生变化
 */

function BetaSchemaForm(props) {
  var columns = props.columns,
      _props$layoutType = props.layoutType,
      layoutType = _props$layoutType === void 0 ? 'ProForm' : _props$layoutType,
      _props$type = props.type,
      type = _props$type === void 0 ? 'form' : _props$type,
      action = props.action,
      rest = _objectWithoutProperties(props, ["columns", "layoutType", "type", "action"]);

  var Form = FormComments[layoutType] || ProForm;

  var _ProForm$useForm = ProForm.useForm(),
      _ProForm$useForm2 = _slicedToArray(_ProForm$useForm, 1),
      form = _ProForm$useForm2[0];

  var formRef = useRef(form);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      updateTime = _useState2[0],
      updateFormRender = _useState2[1];
  /**
   * 生成子项，方便被 table 接入
   *
   * @param items
   */


  var genItems = useCallback(function (items, update) {
    return items.sort(function (a, b) {
      if (b.order || a.order) {
        return (b.order || 0) - (a.order || 0);
      }

      return (b.index || 0) - (a.index || 0);
    }).map(function (originItem, index) {
      var _item$dataIndex;

      var title = runFunction(originItem.title, 'form');
      var item = omitUndefined({
        name: originItem.name,
        valueType: runFunction(originItem.valueType, {}),
        key: originItem.key,
        columns: originItem.columns,
        fieldProps: runFunction(originItem.fieldProps, formRef.current, originItem),
        valueEnum: originItem.valueEnum,
        dataIndex: originItem.key || originItem.dataIndex,
        initialValue: originItem.initialValue,
        formItemProps: runFunction(originItem.formItemProps, formRef.current, originItem),
        width: originItem.width,
        render: originItem.render,
        renderFormItem: originItem.renderFormItem,
        index: originItem.index,
        readonly: originItem.readonly,
        transform: originItem.transform,
        colSize: originItem.colSize,
        className: originItem.className,
        renderText: originItem.renderText,
        request: originItem.request,
        params: originItem.params,
        tooltip: originItem.tooltip || originItem.tip,
        title: title
      }); // 几种特殊的 value 不处理

      if (item.valueType && typeof item.valueType === 'string' && ['index', 'indexBorder', 'option'].includes(item.valueType)) {
        return null;
      }

      var key = item.key || ((_item$dataIndex = item.dataIndex) === null || _item$dataIndex === void 0 ? void 0 : _item$dataIndex.toString()) || index;

      if (item.valueType === 'group') {
        if (!item.columns) return null;
        return /*#__PURE__*/React.createElement(ProFormGroup, _extends({
          key: key,
          label: item.title
        }, item.fieldProps), genItems(item.columns));
      }

      if (item.valueType === 'formList' && item.dataIndex) {
        if (!item.columns) return null;
        return /*#__PURE__*/React.createElement(ProFormList, _extends({
          key: key,
          name: item.dataIndex,
          label: item.title,
          initialValue: item.initialValue
        }, item.fieldProps), genItems(item.columns));
      }

      if (item.valueType === 'formSet' && item.dataIndex) {
        if (!item.columns) return null;
        return /*#__PURE__*/React.createElement(ProFormFieldSet, _extends({}, item.formItemProps, {
          key: key,
          initialValue: item.initialValue,
          name: item.dataIndex,
          label: item.title
        }, item.fieldProps), genItems(item.columns, update));
      }
      /** 公用的 类型 props */


      var formFieldProps = _objectSpread(_objectSpread({
        key: key,
        name: item.dataIndex,
        label: item.title
      }, omit(item, ['dataIndex', 'width', 'render', 'renderFormItem', 'renderText', 'title'])), {}, {
        width: item.width,
        formItemProps: item.formItemProps,
        fieldProps: item.fieldProps,
        render: (item === null || item === void 0 ? void 0 : item.render) ? function (dom, entity, renderIndex) {
          var _item$render;

          return item === null || item === void 0 ? void 0 : (_item$render = item.render) === null || _item$render === void 0 ? void 0 : _item$render.call(item, dom, entity, renderIndex, action === null || action === void 0 ? void 0 : action.current, _objectSpread({
            type: type
          }, item));
        } : undefined
      });

      var defaultRender = function defaultRender() {
        return /*#__PURE__*/React.createElement(ProFormField, _extends({}, formFieldProps, {
          ignoreFormItem: true
        }));
      };

      if (item === null || item === void 0 ? void 0 : item.renderFormItem) {
        var _item$renderFormItem;

        var formDom = item === null || item === void 0 ? void 0 : (_item$renderFormItem = item.renderFormItem) === null || _item$renderFormItem === void 0 ? void 0 : _item$renderFormItem.call(item, _objectSpread(_objectSpread({
          type: type
        }, item), {}, {
          originProps: originItem
        }), _objectSpread(_objectSpread({}, item), {}, {
          defaultRender: defaultRender,
          type: type
        }), formRef.current);

        if (formDom === false || formDom === undefined || formDom === null) {
          return null;
        }
      }

      return /*#__PURE__*/React.createElement(ProFormField, _extends({}, formFieldProps, {
        // eslint-disable-next-line react/no-array-index-key
        key: "".concat(key, "-").concat(index),
        transform: item.transform,
        renderFormItem: (item === null || item === void 0 ? void 0 : item.renderFormItem) ? function (_, config) {
          var _item$renderFormItem2;

          return item === null || item === void 0 ? void 0 : (_item$renderFormItem2 = item.renderFormItem) === null || _item$renderFormItem2 === void 0 ? void 0 : _item$renderFormItem2.call(item, _objectSpread(_objectSpread({
            type: type
          }, item), {}, {
            originProps: originItem
          }), _objectSpread(_objectSpread({}, config), {}, {
            defaultRender: defaultRender,
            type: type
          }), formRef.current);
        } : undefined
      }));
    });
  }, [action, type]);
  var needRealUpdate = useMemo(function () {
    return columns.some(function (item) {
      return item.renderFormItem || typeof item.fieldProps === 'function' || typeof item.formItemProps === 'function';
    });
  }, [columns]);
  var domList = useMemo(function () {
    return genItems(columns, updateTime);
  }, [columns, genItems, updateTime]);
  return /*#__PURE__*/React.createElement(Form, _extends({
    formRef: formRef,
    form: form
  }, rest, {
    onInit: function onInit() {
      var _rest$onInit;

      if (needRealUpdate) {
        updateFormRender(updateTime + 1);
      }

      for (var _len = arguments.length, restValue = new Array(_len), _key = 0; _key < _len; _key++) {
        restValue[_key] = arguments[_key];
      }

      rest === null || rest === void 0 ? void 0 : (_rest$onInit = rest.onInit) === null || _rest$onInit === void 0 ? void 0 : _rest$onInit.call.apply(_rest$onInit, [rest].concat(restValue));
    },
    onValuesChange: function onValuesChange() {
      var _rest$onValuesChange;

      if (needRealUpdate) {
        updateFormRender(updateTime + 1);
      }

      for (var _len2 = arguments.length, restValue = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        restValue[_key2] = arguments[_key2];
      }

      rest === null || rest === void 0 ? void 0 : (_rest$onValuesChange = rest.onValuesChange) === null || _rest$onValuesChange === void 0 ? void 0 : _rest$onValuesChange.call.apply(_rest$onValuesChange, [rest].concat(restValue));
    }
  }), domList);
}

export default BetaSchemaForm;