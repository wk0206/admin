import React from 'react';
import type { InputProps, SelectProps } from 'antd';
import type { ProSchema } from '@ant-design/pro-utils';
import type { ProFormItemProps } from '../../interface';
export declare type ProFormFieldProps<T = any> = ProSchema<T, ProFormItemProps<InputProps & SelectProps<string>> & {
    mode?: 'edit' | 'read' | 'update';
    isDefaultDom?: boolean;
    ref?: any;
    plain?: boolean;
}, any, any>;
declare const _default: React.ComponentClass<{
    key?: React.Key | undefined;
    dataIndex?: string | number | (string | number)[] | undefined;
    valueType?: any;
    title?: React.ReactNode | ((schema: ProSchema<any, {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: any, dom: React.ReactNode) => React.ReactNode);
    tooltip?: string | undefined;
    tip?: string | undefined;
    valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
    fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: {
        key?: React.Key | undefined;
        dataIndex?: string | number | (string | number)[] | undefined;
        valueType?: (import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | ((entity: any, type: import("@ant-design/pro-utils").ProSchemaComponentTypes) => import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | undefined;
        title?: React.ReactNode | ((schema: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: import("@ant-design/pro-utils").ProSchemaComponentTypes, dom: React.ReactNode) => React.ReactNode);
        tooltip?: string | undefined;
        tip?: string | undefined;
        valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
        fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
            entity: any;
        }) => Record<string, any>) | undefined;
        formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
        }) => import("antd").FormItemProps<any>) | undefined;
        renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
        render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
        }) => React.ReactNode) | undefined;
        renderFormItem?: ((schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            index?: number | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            originProps?: any;
        }, config: {
            onSelect?: ((value: any) => void) | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            recordKey?: React.Key | React.Key[] | undefined;
            record?: any;
            isEditable?: boolean | undefined;
            defaultRender: (newItem: ProSchema<any, {
                fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
                placeholder?: string | string[] | undefined;
                secondary?: boolean | undefined;
                allowClear?: boolean | undefined;
                disabled?: boolean | undefined;
                width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
                proFieldProps?: {
                    light?: boolean | undefined;
                    label?: React.ReactNode;
                    mode?: "read" | undefined;
                    proFieldKey?: string | undefined;
                    render?: any;
                } | undefined;
            } & import("antd").FormItemProps<any> & {
                mode?: "read" | "edit" | "update" | undefined;
                isDefaultDom?: boolean | undefined;
                ref?: any;
                plain?: boolean | undefined;
            }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">) => JSX.Element | null;
        }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
        editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
        request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
        params?: Record<string, any> | undefined;
        hideInDescriptions?: boolean | undefined;
        hideInForm?: boolean | undefined;
        hideInTable?: boolean | undefined;
        hideInSearch?: boolean | undefined;
    } & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        type: any;
        isEditable?: boolean | undefined;
        rowKey?: string | undefined;
        rowIndex: number;
        entity: any;
    }) => Record<string, any>) | undefined;
    formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: {
        key?: React.Key | undefined;
        dataIndex?: string | number | (string | number)[] | undefined;
        valueType?: (import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | ((entity: any, type: import("@ant-design/pro-utils").ProSchemaComponentTypes) => import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | undefined;
        title?: React.ReactNode | ((schema: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: import("@ant-design/pro-utils").ProSchemaComponentTypes, dom: React.ReactNode) => React.ReactNode);
        tooltip?: string | undefined;
        tip?: string | undefined;
        valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
        fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
            entity: any;
        }) => Record<string, any>) | undefined;
        formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
        }) => import("antd").FormItemProps<any>) | undefined;
        renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
        render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
        }) => React.ReactNode) | undefined;
        renderFormItem?: ((schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            index?: number | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            originProps?: any;
        }, config: {
            onSelect?: ((value: any) => void) | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            recordKey?: React.Key | React.Key[] | undefined;
            record?: any;
            isEditable?: boolean | undefined;
            defaultRender: (newItem: ProSchema<any, {
                fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
                placeholder?: string | string[] | undefined;
                secondary?: boolean | undefined;
                allowClear?: boolean | undefined;
                disabled?: boolean | undefined;
                width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
                proFieldProps?: {
                    light?: boolean | undefined;
                    label?: React.ReactNode;
                    mode?: "read" | undefined;
                    proFieldKey?: string | undefined;
                    render?: any;
                } | undefined;
            } & import("antd").FormItemProps<any> & {
                mode?: "read" | "edit" | "update" | undefined;
                isDefaultDom?: boolean | undefined;
                ref?: any;
                plain?: boolean | undefined;
            }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">) => JSX.Element | null;
        }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
        editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
        request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
        params?: Record<string, any> | undefined;
        hideInDescriptions?: boolean | undefined;
        hideInForm?: boolean | undefined;
        hideInTable?: boolean | undefined;
        hideInSearch?: boolean | undefined;
    } & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        type: any;
        isEditable?: boolean | undefined;
        rowKey?: string | undefined;
        rowIndex: number;
    }) => import("antd").FormItemProps<any>) | undefined;
    renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
    render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        isEditable?: boolean | undefined;
        type: any;
    }) => React.ReactNode) | undefined;
    renderFormItem?: ((schema: any & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        isEditable?: boolean | undefined;
        index?: number | undefined;
        type: any;
        originProps?: any;
    }, config: {
        onSelect?: ((value: any) => void) | undefined;
        type: any;
        recordKey?: React.Key | React.Key[] | undefined;
        record?: any;
        isEditable?: boolean | undefined;
        defaultRender: (newItem: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, any, any>) => JSX.Element | null;
    }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
    editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
    request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
    params?: Record<string, any> | undefined;
    hideInDescriptions?: boolean | undefined;
    hideInForm?: boolean | undefined;
    hideInTable?: boolean | undefined;
    hideInSearch?: boolean | undefined;
} & {
    fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    mode?: "read" | "edit" | "update" | undefined;
    isDefaultDom?: boolean | undefined;
    ref?: any;
    plain?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps, any> | React.FunctionComponent<{
    key?: React.Key | undefined;
    dataIndex?: string | number | (string | number)[] | undefined;
    valueType?: any;
    title?: React.ReactNode | ((schema: ProSchema<any, {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: any, dom: React.ReactNode) => React.ReactNode);
    tooltip?: string | undefined;
    tip?: string | undefined;
    valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
    fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: {
        key?: React.Key | undefined;
        dataIndex?: string | number | (string | number)[] | undefined;
        valueType?: (import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | ((entity: any, type: import("@ant-design/pro-utils").ProSchemaComponentTypes) => import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | undefined;
        title?: React.ReactNode | ((schema: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: import("@ant-design/pro-utils").ProSchemaComponentTypes, dom: React.ReactNode) => React.ReactNode);
        tooltip?: string | undefined;
        tip?: string | undefined;
        valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
        fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
            entity: any;
        }) => Record<string, any>) | undefined;
        formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
        }) => import("antd").FormItemProps<any>) | undefined;
        renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
        render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
        }) => React.ReactNode) | undefined;
        renderFormItem?: ((schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            index?: number | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            originProps?: any;
        }, config: {
            onSelect?: ((value: any) => void) | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            recordKey?: React.Key | React.Key[] | undefined;
            record?: any;
            isEditable?: boolean | undefined;
            defaultRender: (newItem: ProSchema<any, {
                fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
                placeholder?: string | string[] | undefined;
                secondary?: boolean | undefined;
                allowClear?: boolean | undefined;
                disabled?: boolean | undefined;
                width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
                proFieldProps?: {
                    light?: boolean | undefined;
                    label?: React.ReactNode;
                    mode?: "read" | undefined;
                    proFieldKey?: string | undefined;
                    render?: any;
                } | undefined;
            } & import("antd").FormItemProps<any> & {
                mode?: "read" | "edit" | "update" | undefined;
                isDefaultDom?: boolean | undefined;
                ref?: any;
                plain?: boolean | undefined;
            }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">) => JSX.Element | null;
        }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
        editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
        request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
        params?: Record<string, any> | undefined;
        hideInDescriptions?: boolean | undefined;
        hideInForm?: boolean | undefined;
        hideInTable?: boolean | undefined;
        hideInSearch?: boolean | undefined;
    } & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        type: any;
        isEditable?: boolean | undefined;
        rowKey?: string | undefined;
        rowIndex: number;
        entity: any;
    }) => Record<string, any>) | undefined;
    formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: {
        key?: React.Key | undefined;
        dataIndex?: string | number | (string | number)[] | undefined;
        valueType?: (import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | ((entity: any, type: import("@ant-design/pro-utils").ProSchemaComponentTypes) => import("@ant-design/pro-field").ProFieldValueType | import("@ant-design/pro-utils").ProFieldValueObjectType) | undefined;
        title?: React.ReactNode | ((schema: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">, type: import("@ant-design/pro-utils").ProSchemaComponentTypes, dom: React.ReactNode) => React.ReactNode);
        tooltip?: string | undefined;
        tip?: string | undefined;
        valueEnum?: import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap | ((row: any) => import("@ant-design/pro-utils").ProSchemaValueEnumObj | import("@ant-design/pro-utils").ProSchemaValueEnumMap) | undefined;
        fieldProps?: Record<string, any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
            entity: any;
        }) => Record<string, any>) | undefined;
        formItemProps?: import("antd").FormItemProps<any> | ((form: import("antd").FormInstance<any>, config: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            isEditable?: boolean | undefined;
            rowKey?: string | undefined;
            rowIndex: number;
        }) => import("antd").FormItemProps<any>) | undefined;
        renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
        render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
        }) => React.ReactNode) | undefined;
        renderFormItem?: ((schema: any & {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        } & {
            isEditable?: boolean | undefined;
            index?: number | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            originProps?: any;
        }, config: {
            onSelect?: ((value: any) => void) | undefined;
            type: import("@ant-design/pro-utils").ProSchemaComponentTypes;
            recordKey?: React.Key | React.Key[] | undefined;
            record?: any;
            isEditable?: boolean | undefined;
            defaultRender: (newItem: ProSchema<any, {
                fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
                placeholder?: string | string[] | undefined;
                secondary?: boolean | undefined;
                allowClear?: boolean | undefined;
                disabled?: boolean | undefined;
                width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
                proFieldProps?: {
                    light?: boolean | undefined;
                    label?: React.ReactNode;
                    mode?: "read" | undefined;
                    proFieldKey?: string | undefined;
                    render?: any;
                } | undefined;
            } & import("antd").FormItemProps<any> & {
                mode?: "read" | "edit" | "update" | undefined;
                isDefaultDom?: boolean | undefined;
                ref?: any;
                plain?: boolean | undefined;
            }, import("@ant-design/pro-utils").ProSchemaComponentTypes, "text">) => JSX.Element | null;
        }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
        editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
        request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
        params?: Record<string, any> | undefined;
        hideInDescriptions?: boolean | undefined;
        hideInForm?: boolean | undefined;
        hideInTable?: boolean | undefined;
        hideInSearch?: boolean | undefined;
    } & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        type: any;
        isEditable?: boolean | undefined;
        rowKey?: string | undefined;
        rowIndex: number;
    }) => import("antd").FormItemProps<any>) | undefined;
    renderText?: ((text: any, record: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}>) => any) | undefined;
    render?: ((dom: React.ReactNode, entity: any, index: number, action: import("@ant-design/pro-utils").ProCoreActionType<{}> | undefined, schema: any & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        isEditable?: boolean | undefined;
        type: any;
    }) => React.ReactNode) | undefined;
    renderFormItem?: ((schema: any & {
        fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
        placeholder?: string | string[] | undefined;
        secondary?: boolean | undefined;
        allowClear?: boolean | undefined;
        disabled?: boolean | undefined;
        width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
        proFieldProps?: {
            light?: boolean | undefined;
            label?: React.ReactNode;
            mode?: "read" | undefined;
            proFieldKey?: string | undefined;
            render?: any;
        } | undefined;
    } & import("antd").FormItemProps<any> & {
        mode?: "read" | "edit" | "update" | undefined;
        isDefaultDom?: boolean | undefined;
        ref?: any;
        plain?: boolean | undefined;
    } & {
        isEditable?: boolean | undefined;
        index?: number | undefined;
        type: any;
        originProps?: any;
    }, config: {
        onSelect?: ((value: any) => void) | undefined;
        type: any;
        recordKey?: React.Key | React.Key[] | undefined;
        record?: any;
        isEditable?: boolean | undefined;
        defaultRender: (newItem: ProSchema<any, {
            fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
            placeholder?: string | string[] | undefined;
            secondary?: boolean | undefined;
            allowClear?: boolean | undefined;
            disabled?: boolean | undefined;
            width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
            proFieldProps?: {
                light?: boolean | undefined;
                label?: React.ReactNode;
                mode?: "read" | undefined;
                proFieldKey?: string | undefined;
                render?: any;
            } | undefined;
        } & import("antd").FormItemProps<any> & {
            mode?: "read" | "edit" | "update" | undefined;
            isDefaultDom?: boolean | undefined;
            ref?: any;
            plain?: boolean | undefined;
        }, any, any>) => JSX.Element | null;
    }, form: import("antd").FormInstance<any>) => React.ReactNode) | undefined;
    editable?: false | import("@ant-design/pro-utils").ProTableEditableFnType<any> | undefined;
    request?: import("@ant-design/pro-utils").ProFieldRequestData<any> | undefined;
    params?: Record<string, any> | undefined;
    hideInDescriptions?: boolean | undefined;
    hideInForm?: boolean | undefined;
    hideInTable?: boolean | undefined;
    hideInSearch?: boolean | undefined;
} & {
    fieldProps?: (import("../../interface").FieldProps & InputProps & SelectProps<string>) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    mode?: "read" | "edit" | "update" | undefined;
    isDefaultDom?: boolean | undefined;
    ref?: any;
    plain?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps>;
export default _default;
