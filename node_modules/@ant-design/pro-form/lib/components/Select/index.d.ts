import React from 'react';
import type { SelectProps } from 'antd';
import type { ProSchema } from '@ant-design/pro-utils';
import type { ProFormItemProps } from '../../interface';
export declare type ProFormSelectProps = ProFormItemProps<SelectProps<any> & {
    /**
     * 是否在输入框聚焦时触发搜索
     *
     * @default false
     */
    searchOnFocus?: boolean;
    /**
     * 选择完一个之后是否清空搜索项重新搜索
     *
     * @default false
     */
    resetAfterSelect?: boolean;
}> & {
    valueEnum?: ProSchema['valueEnum'];
    params?: ProSchema['params'];
    request?: ProSchema['request'];
    options?: SelectProps<any>['options'] | string[];
    mode?: SelectProps<any>['mode'] | 'singe';
    showSearch?: SelectProps<any>['showSearch'];
    readonly?: boolean;
};
declare const ProFormSelect: React.ComponentClass<{
    fieldProps?: (import("../../interface").FieldProps & SelectProps<any> & {
        /**
         * 是否在输入框聚焦时触发搜索
         *
         * @default false
         */
        searchOnFocus?: boolean | undefined;
        /**
         * 选择完一个之后是否清空搜索项重新搜索
         *
         * @default false
         */
        resetAfterSelect?: boolean | undefined;
    }) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    valueEnum?: ProSchema['valueEnum'];
    params?: ProSchema['params'];
    request?: ProSchema['request'];
    options?: SelectProps<any>['options'] | string[];
    mode?: SelectProps<any>['mode'] | 'singe';
    showSearch?: SelectProps<any>['showSearch'];
    readonly?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps, any> | React.FunctionComponent<{
    fieldProps?: (import("../../interface").FieldProps & SelectProps<any> & {
        /**
         * 是否在输入框聚焦时触发搜索
         *
         * @default false
         */
        searchOnFocus?: boolean | undefined;
        /**
         * 选择完一个之后是否清空搜索项重新搜索
         *
         * @default false
         */
        resetAfterSelect?: boolean | undefined;
    }) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    valueEnum?: ProSchema['valueEnum'];
    params?: ProSchema['params'];
    request?: ProSchema['request'];
    options?: SelectProps<any>['options'] | string[];
    mode?: SelectProps<any>['mode'] | 'singe';
    showSearch?: SelectProps<any>['showSearch'];
    readonly?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps>;
declare const ProFormSearchSelect: React.ComponentClass<{
    fieldProps?: (import("../../interface").FieldProps & SelectProps<any> & {
        /**
         * 是否在输入框聚焦时触发搜索
         *
         * @default false
         */
        searchOnFocus?: boolean | undefined;
        /**
         * 选择完一个之后是否清空搜索项重新搜索
         *
         * @default false
         */
        resetAfterSelect?: boolean | undefined;
    }) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    valueEnum?: ProSchema['valueEnum'];
    params?: ProSchema['params'];
    request?: ProSchema['request'];
    options?: SelectProps<any>['options'] | string[];
    mode?: SelectProps<any>['mode'] | 'singe';
    showSearch?: SelectProps<any>['showSearch'];
    readonly?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps, any> | React.FunctionComponent<{
    fieldProps?: (import("../../interface").FieldProps & SelectProps<any> & {
        /**
         * 是否在输入框聚焦时触发搜索
         *
         * @default false
         */
        searchOnFocus?: boolean | undefined;
        /**
         * 选择完一个之后是否清空搜索项重新搜索
         *
         * @default false
         */
        resetAfterSelect?: boolean | undefined;
    }) | undefined;
    placeholder?: string | string[] | undefined;
    secondary?: boolean | undefined;
    allowClear?: boolean | undefined;
    disabled?: boolean | undefined;
    width?: number | "sm" | "md" | "xl" | "xs" | "lg" | undefined;
    proFieldProps?: {
        light?: boolean | undefined;
        label?: React.ReactNode;
        mode?: "read" | undefined;
        proFieldKey?: string | undefined;
        render?: any;
    } | undefined;
} & import("antd").FormItemProps<any> & {
    valueEnum?: ProSchema['valueEnum'];
    params?: ProSchema['params'];
    request?: ProSchema['request'];
    options?: SelectProps<any>['options'] | string[];
    mode?: SelectProps<any>['mode'] | 'singe';
    showSearch?: SelectProps<any>['showSearch'];
    readonly?: boolean | undefined;
} & import("../../BaseForm/createField").ExtendsProps>;
declare const WrappedProFormSelect: typeof ProFormSelect & {
    SearchSelect: typeof ProFormSearchSelect;
};
export default WrappedProFormSelect;
